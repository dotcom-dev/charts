#
# General config
#
nameOverride: ""
fullNameOverride: ""

#
# Deployment
#
replicaCount: 1
image:
  repository: ""
  pullPolicy: "Always"
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  # command: []
  # args: []

imagePullSecrets: []

#env:
#  - name: "SERVICE_NAME"
#    value: {{ .Values.serviceName }}

#livenessProbe:
#  httpGet:
#    path: /
#    port: http

#readinessProbe:
#  httpGet:
#    path: /
#    port: http

#volumes:
#  - name: secretName
#    secret:
#      secretName: secretName
#      defaultMode: 420

#volumeMounts:
#  - name: secretName
#    mountPath: /usr/src/app/.env
#    subPath: .env

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

strategy: {}

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  # targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

#
# Service
#
service:
  enabled: true
  type: ClusterIP
  port: 3000

# Headless service configuration
headlessService:
  enabled: false
  # Port defaults to the same port as the regular service if not specified

additionalServices: []

#
# Service Export (Multi-cluster services)
#
serviceExport:
  enabled: false
  annotations: {}

#
# Regional Services (for traffic distribution)
#
regionalServices: []
# Example:
# - name: eu-service
#   region: eu
#   serviceExport:
#     enabled: true
#     annotations: {}
# - name: us-service
#   region: us
#   serviceExport:
#     enabled: true
#     annotations: {}

#
# Ingress
#
ingress:
  enabled: false
  annotations:
#    cert-manager.io/cluster-issuer: "letsencrypt-production"
#    cert-manager.io/acme-challenge-type: http01
#    nginx.ingress.kubernetes.io/ssl-redirect: "true"
#    nginx.ingress.kubernetes.io/proxy-buffering: "on"
#    nginx.ingress.kubernetes.io/client-body-buffer-size: 120m
#    nginx.ingress.kubernetes.io/client-max-body-size: 120m
#    nginx.ingress.kubernetes.io/proxy-body-size: 120m
#    nginx.ingress.kubernetes.io/proxy-buffer-size: 120m
#    nginx.ingress.kubernetes.io/proxy-buffers-number: "20"
  hosts:
    - host: ""
      paths:
        - pathType: ImplementationSpecific
  tls: []
#    - secretName: chart-example-tls
#      hosts:
#        - chart-example.local

additionalIngresses: []

networkPolicy:
  enabled: false

#
# Pod Disruption Budget
#
podDisruptionBudget:
  enabled: false
  # Specify either minAvailable or maxUnavailable, not both
  # minAvailable: 1
  # maxUnavailable: 1

#
# Google Managed Prometheus (GMP) monitoring
#
gmp:
  enabled: false
  # Path to scrape metrics from
  path: /metrics
  # Scraping interval
  interval: 30s
  # Port to scrape metrics from (can be a name or a number)
  # If not specified, the 'http' port will be used
  port: http

httpRoute:
  enabled: false
  gatewayName: ""
  gatewayNamespace: ""
  hostname: ""
  # Default service weight (can be set to 0 to disable default service)
  # defaultWeight: 100
  # Additional backends with weights
  additionalBackends: []
  # Example:
  # - name: eu-service
  #   weight: 0
  # - name: us-service  
  #   weight: 0

#
# Jobs
#
jobs:
  # Enable jobs creation
  enabled: false
  # API version for jobs
  apiVersion: "batch/v1"
  # List of one-time jobs to create
  # Example:
  # - name: one-time-job
  #   containers:
  #     - name: task
  #       image: alpine:latest
  #       command: ["echo", "One-time job"]
  #   restartPolicy: Never
  list: []

#
# CronJobs
#
cronJobs:
  # Enable cronJobs creation
  enabled: false
  # API version for cronJobs
  apiVersion: "batch/v1"
  # List of scheduled jobs (CronJobs) to create
  # Example:
  # - name: scheduled-job
  #   schedule: '0 */2 * * *'
  #   containers:
  #     - name: task
  #       image: alpine:latest
  #       command: ["echo", "Scheduled job"]
  #   restartPolicy: OnFailure
  list: []

#
# Health Check Policy (GKE)
#
healthCheckPolicy:
  enabled: false
  # Health check configuration (HTTP only for now)
  httpHealthCheck:
    # Port to check (defaults to service port if not specified)
    port: ""
    # Path to check
    requestPath: "/health"
  # Health check timing configuration
  checkIntervalSec: 10
  timeoutSec: 5
  healthyThreshold: 1
  unhealthyThreshold: 10

#
# Infisical Secret CRD
#
infisicalSecretCRD:
  enabled: false
